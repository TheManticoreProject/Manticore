package commands

import (
	"encoding/binary"
	"fmt"

	"github.com/TheManticoreProject/Manticore/network/smb/smb_v10/message/commands/andx"
	"github.com/TheManticoreProject/Manticore/network/smb/smb_v10/message/commands/codes"
	"github.com/TheManticoreProject/Manticore/network/smb/smb_v10/message/commands/command_interface"
	"github.com/TheManticoreProject/Manticore/network/smb/smb_v10/message/data"
	"github.com/TheManticoreProject/Manticore/network/smb/smb_v10/message/parameters"
	"github.com/TheManticoreProject/Manticore/network/smb/smb_v10/types"
)

// ReadMpxResponse
// Source: https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-cifs/4511aa9b-411b-44f7-8143-39f2ca6dcd5f
type ReadMpxResponse struct {
	command_interface.Command

	// Parameters

	// Offset (4 bytes): The offset, in bytes, from the start of the file at which the
	// read occurred.
	Offset types.ULONG

	// Count (2 bytes): The total number of bytes designated to be returned in all
	// responses to this request. This value usually starts at MaxCountOfBytesToReturn,
	// but can be an overestimate. The overestimate can be reduced while the read is in
	// progress. The last response generated by the server MUST contain the actual
	// total number of bytes read and sent to the client in all of the responses. If
	// the value in the last response is less than MaxCountOfBytesToReturn, the end of
	// file was encountered during the read. If this value is exactly zero (0x0000),
	// the original Offset into the file began at or after the end of file; in this
	// case, only one response MUST be generated. The value of the field can (and
	// usually does) exceed the negotiated buffer size.
	Count types.USHORT

	// Remaining (2 bytes): This integer MUST be -1 for regular files. For I/O devices
	// or named pipes, this indicates the number of bytes remaining to be read from the
	// file after the bytes returned in the response were de-queued. Servers SHOULD
	// return 0xFFFF if they do not support this function on I/O devices or named
	// pipes.
	Remaining types.USHORT

	// DataCompactionMode (2 bytes): Not used and MUST be 0x0000.
	DataCompactionMode types.USHORT

	// Reserved (2 bytes): This field MUST be set to 0x0000.
	Reserved types.USHORT

	// DataLength (2 bytes): This field is the number of bytes read and included in the
	// response. The value of this field MUST NOT cause the message to exceed the
	// client's maximum buffer size as specified in MaxBufferSize of the
	// SMB_COM_SESSION_SETUP_ANDX (section 2.2.4.53) client request.
	DataLength types.USHORT

	// DataOffset (2 bytes): The offset, in bytes, from the beginning of the SMB Header
	// (section 2.2.3.1) to the start of the Buffer field in the SMB_Data.block.
	DataOffset types.USHORT

	// Data

	// Pad (variable): Padding bytes to align data on a proper address boundary. The
	// DataOffset field points to the first byte after this field.
	Pad []types.UCHAR

	// Data (variable): The data read from the file.
	Data []types.UCHAR
}

// NewReadMpxResponse creates a new ReadMpxResponse structure
//
// Returns:
// - A pointer to the new ReadMpxResponse structure
func NewReadMpxResponse() *ReadMpxResponse {
	c := &ReadMpxResponse{
		// Parameters
		Offset:             types.ULONG(0),
		Count:              types.USHORT(0),
		Remaining:          types.USHORT(0),
		DataCompactionMode: types.USHORT(0),
		Reserved:           types.USHORT(0),
		DataLength:         types.USHORT(0),
		DataOffset:         types.USHORT(0),

		// Data
		Pad:  []types.UCHAR{},
		Data: []types.UCHAR{},
	}

	c.Command.SetCommandCode(codes.SMB_COM_READ_MPX)

	return c
}

// Marshal marshals the ReadMpxResponse structure into a byte array
//
// Returns:
// - A byte array representing the ReadMpxResponse structure
// - An error if the marshaling fails
func (c *ReadMpxResponse) Marshal() ([]byte, error) {
	marshalledCommand := []byte{}

	// Create the Parameters structure if it is nil
	if c.GetParameters() == nil {
		c.SetParameters(parameters.NewParameters())
	}
	// Create the Data structure if it is nil
	if c.GetData() == nil {
		c.SetData(data.NewData())
	}

	// In case of AndX, we need to add the parameters to the Parameters structure first
	if c.IsAndX() {
		if c.GetAndX() == nil {
			c.SetAndX(andx.NewAndX())
			c.GetAndX().AndXCommand = codes.SMB_COM_NO_ANDX_COMMAND
		}

		for _, parameter := range c.GetAndX().GetParameters() {
			c.GetParameters().AddWord(parameter)
		}
	}

	// First marshal the data and then the parameters
	// This is because some parameters are dependent on the data, for example the size of some fields within
	// the data will be stored in the parameters
	rawDataContent := []byte{}

	// Marshalling data Pad
	rawDataContent = append(rawDataContent, c.Pad...)

	// Marshalling data
	rawDataContent = append(rawDataContent, c.Data...)

	// Then marshal the parameters
	rawParametersContent := []byte{}

	// Marshalling parameter Offset
	buf4 := make([]byte, 4)
	binary.BigEndian.PutUint32(buf4, uint32(c.Offset))
	rawParametersContent = append(rawParametersContent, buf4...)

	// Marshalling parameter Count
	buf2 := make([]byte, 2)
	binary.BigEndian.PutUint16(buf2, uint16(c.Count))
	rawParametersContent = append(rawParametersContent, buf2...)

	// Marshalling parameter Remaining
	buf2 = make([]byte, 2)
	binary.BigEndian.PutUint16(buf2, uint16(c.Remaining))
	rawParametersContent = append(rawParametersContent, buf2...)

	// Marshalling parameter DataCompactionMode
	buf2 = make([]byte, 2)
	binary.BigEndian.PutUint16(buf2, uint16(c.DataCompactionMode))
	rawParametersContent = append(rawParametersContent, buf2...)

	// Marshalling parameter Reserved
	buf2 = make([]byte, 2)
	binary.BigEndian.PutUint16(buf2, uint16(c.Reserved))
	rawParametersContent = append(rawParametersContent, buf2...)

	// Marshalling parameter DataLength
	buf2 = make([]byte, 2)
	binary.BigEndian.PutUint16(buf2, uint16(c.DataLength))
	rawParametersContent = append(rawParametersContent, buf2...)

	// Marshalling parameter DataOffset
	buf2 = make([]byte, 2)
	binary.BigEndian.PutUint16(buf2, uint16(c.DataOffset))
	rawParametersContent = append(rawParametersContent, buf2...)

	// Marshalling parameters
	c.GetParameters().AddWordsFromBytesStream(rawParametersContent)
	marshalledParameters, err := c.GetParameters().Marshal()
	if err != nil {
		return nil, err
	}
	marshalledCommand = append(marshalledCommand, marshalledParameters...)

	// Marshalling data
	c.GetData().Add(rawDataContent)
	marshalledData, err := c.GetData().Marshal()
	if err != nil {
		return nil, err
	}
	marshalledCommand = append(marshalledCommand, marshalledData...)

	return marshalledCommand, nil
}

// Unmarshal unmarshals a byte array into the command structure
//
// Parameters:
// - data: The byte array to unmarshal
//
// Returns:
// - The number of bytes unmarshalled
func (c *ReadMpxResponse) Unmarshal(data []byte) (int, error) {
	offset := 0

	// First unmarshal the two structures
	bytesRead, err := c.GetParameters().Unmarshal(data)
	if err != nil {
		return 0, err
	}
	rawParametersContent := c.GetParameters().GetBytes()
	_, err = c.GetData().Unmarshal(data[bytesRead:])
	if err != nil {
		return 0, err
	}
	rawDataContent := c.GetData().GetBytes()

	// If the parameters and data are empty, this is a response containing an error code in
	// the SMB Header Status field
	if len(rawParametersContent) == 0 && len(rawDataContent) == 0 {
		return 0, nil
	}

	// First unmarshal the parameters
	offset = 0

	// Unmarshalling parameter Offset
	if len(rawParametersContent) < offset+4 {
		return offset, fmt.Errorf("rawParametersContent too short for Offset")
	}
	c.Offset = types.ULONG(binary.BigEndian.Uint32(rawParametersContent[offset : offset+4]))
	offset += 4

	// Unmarshalling parameter Count
	if len(rawParametersContent) < offset+2 {
		return offset, fmt.Errorf("rawParametersContent too short for Count")
	}
	c.Count = types.USHORT(binary.BigEndian.Uint16(rawParametersContent[offset : offset+2]))
	offset += 2

	// Unmarshalling parameter Remaining
	if len(rawParametersContent) < offset+2 {
		return offset, fmt.Errorf("rawParametersContent too short for Remaining")
	}
	c.Remaining = types.USHORT(binary.BigEndian.Uint16(rawParametersContent[offset : offset+2]))
	offset += 2

	// Unmarshalling parameter DataCompactionMode
	if len(rawParametersContent) < offset+2 {
		return offset, fmt.Errorf("rawParametersContent too short for DataCompactionMode")
	}
	c.DataCompactionMode = types.USHORT(binary.BigEndian.Uint16(rawParametersContent[offset : offset+2]))
	offset += 2

	// Unmarshalling parameter Reserved
	if len(rawParametersContent) < offset+2 {
		return offset, fmt.Errorf("rawParametersContent too short for Reserved")
	}
	c.Reserved = types.USHORT(binary.BigEndian.Uint16(rawParametersContent[offset : offset+2]))
	offset += 2

	// Unmarshalling parameter DataLength
	if len(rawParametersContent) < offset+2 {
		return offset, fmt.Errorf("rawParametersContent too short for DataLength")
	}
	c.DataLength = types.USHORT(binary.BigEndian.Uint16(rawParametersContent[offset : offset+2]))
	offset += 2

	// Unmarshalling parameter DataOffset
	if len(rawParametersContent) < offset+2 {
		return offset, fmt.Errorf("rawParametersContent too short for DataOffset")
	}
	c.DataOffset = types.USHORT(binary.BigEndian.Uint16(rawParametersContent[offset : offset+2]))
	offset += 2

	// Then unmarshal the data
	offset = 0

	// Unmarshalling data Pad
	if len(rawDataContent) < offset+1 {
		return offset, fmt.Errorf("rawParametersContent too short for Pad")
	}
	c.Pad = rawDataContent[offset : offset+1]
	offset++

	// Unmarshalling data
	if len(rawDataContent) < offset+int(c.DataLength) {
		return offset, fmt.Errorf("rawDataContent too short for Data")
	}
	c.Data = rawDataContent[offset : offset+int(c.DataLength)]
	offset += int(c.DataLength)

	return offset, nil
}
